:orphan:
|
|
|

===========================================
Releases in Jira Agile
===========================================

|

**Summary**
------------

Releases in Jira Agile are referred to as versions. A Jira version is used to track an effort that has a deadline, like a milestone or a delivery. An issue is attached to a version to reflect a commitment to deliver the issue’s content to that version, i.e., by that deadline.

An issue (Story, Defect/Bug, Epic, etc.) can be attached to multiple versions, allowing it to be tracked toward multiple deadlines, e.g., tracking an Epic toward delivery in an EAR and in a GA.

This guideline details how to manage and report on Versions using Jira Agile.

|

**Version Management**
---------------------------

Versions are created in Jira projects. A version must exist in any project in which issues are expected to be delivered into the version.

Delivery versions will be generated by the creation of a delivery milestone (EAR, GA) in Panorama. All other Jira versions are not connected to Panorama, and must be created manually.

When Panorama creates a delivery version in Jira, that version will be created in the program project and its execution projects. Panorama will also control any changes to the versions.

All Jira versions aligned with a delivery milestone must be created in the appropriate program project and its execution projects. These versions must stay in sync with regard to name and dates. Panorama handles this synchronization.

|

**Version Information**
---------------------------

Each version has information about its timespan and release status.

**Version**
~~~~~~~~~~~~~~~~~~~~~~

The Version field is the name of the version. If the version is not aligned with a Panorama milestone, it can have any name that is useful.

If the version is aligned with a Panorama GA milestone, it should have the same name as the Panorama release.

If the version is aligned with a Panorama EAR milestone, its name should be the Panorama release followed by “EAR” followed by the EAR name, e.g., “VxWorks 6.9.3 EAR Candidate1”.


**Dates**
~~~~~~~~~~~~~~~~~~~~~~

If the version is not aligned with a Panorama milestone, it can have any start date and end date that is useful.

If the version is aligned with a Panorama release, the start date should be the derived date of the release’s Program Start milestone. The version release date should be the derived date of the milestone with which the version is affiliated.

**Status**
~~~~~~~~~~~~~~~~~~~~~~

A Jira version can have one of two statuses: **Released and Unreleased**.

If the version is not aligned with Panorama, and the work is not done, the status is **Unreleased**. If the work is done, the status is **Released**.

If the version is aligned with a Panorama release, the release status is aligned with the completion of the milestone with which the version is affiliated.

|

**Manually Creating Versions**
--------------------------------

To create a version in Jira:

#. Navigate to the program project.
#. In the sidebar, select the **Manage Versions** page, which is indicated by a cardboard box icon if the sidebar is collapsed.
#. Fill out the **Version**, **Status**, **Start date**, and **Release date** fields as described in the *Version Information* section above. Add a description in the **Description**. 
#. Click Add.
#. Follow the same steps for each execution project associated with the program project, keeping all version information the same.

|

**Manually Maintaining Versions**
-----------------------------------

Once a version is created, it may need to be updated. It may also need to be marked as `Released`.


**Updating Versions**
~~~~~~~~~~~~~~~~~~~~~~

To update a version, follow these steps:

#. Navigate to the program project.
#. In the sidebar, select the **Manage Versions**
#. Locate the row for the version and click the value shown in the Version, Status, Start date, or Release date column in order to make it editable.
#. Change the value, referring to the *Version Information* section above if necessary.
#. Click **Update**.

**Releasing Versions**
~~~~~~~~~~~~~~~~~~~~~~

The status of a version controls where it appears in Jira drop-down lists like the **Found In Versions** and **Fix Version(s)** fields. Each version appears under the heading **Released Versions** or **Unreleased Versions** as appropriate.

When the work for a version is complete, its status should be updated to Released. To release a version, update that version and set **Status** to **Released**.

|

**Associating Issues with a Version**
----------------------------------------------

Once the version is created, existing issues can be targeted at that version. There is more than one way to add issues to a version.


**Backlog Method**
~~~~~~~~~~~~~~~~~~~~~~

Use the agile scrum backlog board associated with your project to assign issues to a version:

#. Navigate to the execution project.
#. Go to the scrum backlog board.
#. If the **VERSIONS** column is not already expanded, expand it by clicking **VERSIONS**, which appears rotated 90°.
#. Drag and drop issues from the backlog onto the desired version.

This method assigned the issues to a single version. *Dragging an item that is already associated with a version onto a different version will remove the existing version and set the new one*.


**More than One Version**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Although an issue can have more than one version, the Backlog Method of association only supports setting a single value.

If you are using a GA and an EAR, use the Backlog Method to connect issues to the GA version, and then manually update or bulk update the issues to add the EAR version.


**Manual Update**
```````````````````` 

Edit a single issue and update its **Fix Version(s)** field to add a second version.


**Bulk Update**
````````````````` 

To add an additional version to multiple issues (Story, Bug):

#. `Create a filter <https://confluence.atlassian.com%2Fjiracorecloud%2Fsearching-for-issues-765593657.html>`_ (*NL 8/12: this is not a valid link.  not sure where it should point to*) that selects the issues to be assigned to the additional version.
#. Select **Bulk Change: all n issue(s)** from the **Tools** menu with the gear icon.
#. Select the issues you wish to add to the version and click **Next**.
#. Select **Edit Issues** and click **Next**.
#. Select **Change Fix Version(s)** and ensure that **Add to existing** is selected in the drop-down menu.
#. Set the value to the version you want to add.
#. Scroll to the bottom of the screen and click **Next**.
#. Review the changes and click **Confirm** if you are satisfied
#. Click **Acknowledge** when the update is done.
	
|

**Archiving Versions**
---------------------------
 
If, due to its age or other considerations, a version is no longer relevant to current users of Jira, its status may be changed to **Archived** in order to remove it from Jira drop-down lists like the **Fix Version(s)** field. Changing its status to Archived does not remove the version from existing issues already associated with it.

To archive a version, contact the project lead.

The **Manage Versions** tab in the Jira interface cannot be used to change the status of a version to **Archived**.

|

**Change Log**
--------------

+----------------+----------------+----------------+----------------+---------------------------------------+
| **Date**       | **Change       | **Version**    | **Change By**  | **Description**                       |
|                | Request ID**   |                |                |                                       |
+----------------+----------------+----------------+----------------+---------------------------------------+
| 07/30/2020     | N/A            | 0.1            | Doina Lepadat  | Initial Draft                         |
+----------------+----------------+----------------+----------------+---------------------------------------+
|                |                |                |                |                                       |
+----------------+----------------+----------------+----------------+---------------------------------------+
|                |                |                |                |                                       |
+----------------+----------------+----------------+----------------+---------------------------------------+

 