:orphan:

|
|
|

===================================
Git Commit Message Standard
===================================
|
|

**Key concepts**
-----------------

- **Be a good collaborator** - show it by creating good commit messages
- **Until a commit is pushed and merged into a public or team repo, you have the ability to edit, update and fix the** *draft* **commit message**.
- **Organization** and **consistency** is desired.
- Do not push a commit into a public repo with a commit message that does not meet the basic requirements.

|

**Overview**
----------------

Public history is immutable and easy to follow; private history is malleable, disposable. 

 
The commit history in a repo is like a book to be read. **IT WILL be read in the future**. If it is written poorly it will be cursed, ignored and perhaps used as an example of a poor commit message. Create it as though it will be read by the world.

It must be readable, accurate, concise and consistent and use factual references (URLs) that backup the narrative presented.

|

**Basic Requirements of A good commit message**
------------------------------------------------

- Use the 50/72 style 
- Spell check
- Write your commit message in the present tense / Imperative
  - `How to Write a Git Commit Message - Seven Rules <https://chris.beams.io/posts/git-commit/#seven-rules>`_ 

|
 
**50/72 Style basics**
-------------------------

The 50/72 style has 3 rules:

- 1st line: Capitalized short summary; A statement of **what**, 50 chars or less, does not end with a period.

  - Write the summary line and description of what you have done in the imperative mode; present tense, as if you were commanding someone.

- Always leave the second line blank.
- More detailed explanatory description of the change, multiple paragraphs if necessary. Wrap at 72 characters.
  - include external backing references: CCR, JIRA

In some contexts, the first line is treated as the subject of an email and the rest of the text as the body. A blank line separating the summary from the body is critical (unless you omit the body entirely); tools like rebase can get confused if you run the two together.

See `Git Commit Messages : 50/72 Formatting <https://stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting>`_

|

**Write your commit message in the present tense / Imperative mode**
-----------------------------------------------------------------------

Write the summary line and description of what you have done in the imperative mode; present tense.  Use "fix", "add", "change" instead of "fixed", "added", "changed". Tells what the commit, when applied, will do.

This convention matches up with commit messages generated by commands like git merge and git revert.

 
Further paragraphs come after blank lines.

- Bullet points are okay, too
- Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between.
- Use a hanging indent

What is Imperative Mode? See`HtWaGCM - Imperative <https://chris.beams.io/posts/git-commit/#imperative>`_

 
**Answer 3 Qs in the commit message**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Why is it necessary?

  - fix a bug, add a feature, improve performance, reliability, stability, or change for the sake of correctness.

- How does it address the issue in the summary
- What effects does it have? ( benchmarks, side effects, etc.)

|
 
**Fixing commit messages**
---------------------------

 
NOTE: To fix a commit after pushing requires one to revert the commit, or the admin to change history.

Commits and commit messages are DRAFT until pushed.

In the working branch, before pushing, take the time after the updates are done to rebase/commit amend to complete the draft narrative. Commit messages may have errors when in the draft mode (in local branch, not pushed),
but must be corrected prior to a push.


- **Commit amend**

*git commit --amend*


- **Rebase**

If there is a commit in a stack of commits that is not going to be squashed, Start a git rebase session.

For example, if the commit message you want rework is two back from the HEAD use:

*git rebase -i  HEAD~3*

Then in the work list for rebase, change 'pick' to 'reword' for the commit needing rework. 

Rebase executes, and then pauses, waiting for the user to 'rework` the commit. 

Then, rework the commit by running

*git commit --amend*

In the commit editor, fix/update and then save the commit message. 

Then continue the rebase, by running 

*git rebase --continue*

Rebase completes

Verify the commit message is done using

*git show HEAD~2 --stat*

 

- **Review the  commit message as part of the CCR**

Attach the commit message to the review.

*git show --stat > ~/commitmsg.txt*
*ccollab addfiles NNN ~/commitmsg.txt*

|
 
**References**
--------------

- `5.2 Distributed Git - Contributing to a Project <https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project>`_
- `“Merge pull request” Considered Harmful <https://www.spreedly.com/blog/merge-pull-request-considered-harmful>`_
- `Contributing to a Project <https://git-scm.com/book/en/v2/Distributed-Git-Contributing-to-a-Project>`_
- `Better formatting for commit messages <https://jira.atlassian.com/browse/SRCTREE-1068>`_
- `How to Write a Git Commit Message <https://chris.beams.io/posts/git-commit/>`_
- `A Note About Git Commit Messages <https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html>`_
- `Gerrit/Commit message guidelines <https://www.mediawiki.org/wiki/Gerrit/Commit_message_guidelines>`_
- `Proper Git Commit Messages and an Elegant Git History <http://ablogaboutcode.com/2011/03/23/proper-git-commit-messages-and-an-elegant-git-history>`_
- `Good Commit Messages And Enforcing Them With Git Hooks <http://addamhardy.com/2013/06/05/good-commit-messages-and-enforcing-them-with-git-hooks.html>`_
- `Git Commit Messages <https://wiki.openstack.org/wiki/GitCommitMessages>`_
 
|
 
**Historical references**
---------------------------

The Commit message standard has been about for a while and had been codified for previous CERT projects.
- The Git WI version references this text: http://bitbucket.wrs.com/projects/VX7/repos/vx7-helix-cert-evidence/browse/08_Software_Configuration_Management/commit-message-standard.txt
- Which was based on this: https://jive.windriver.com/docs/DOC-74204
- Which is based on this: http://twiki.wrs.com/PBUeng/VxWorks653_3011#Commit_Message_Standard
- Which was based on this: http://twiki.wrs.com/PBUeng/Hv2021GitUsageAndWorkflow
- Which references this: http://vxgit.wrs.com/projects/HYP/repos/hypervisor/browse/.tools/commit-msg-template.txt
|

**Change Log**
--------------

+--------------+------------------------+---------------+-------------------------+-------------------------------------------------------------------------------------+
| **Date**     | **Change Request ID**  | **Version**   | **Change By**           | **Description**                                                                     |
+--------------+------------------------+---------------+-------------------------+-------------------------------------------------------------------------------------+
| 08/03/2020   | N/A                    | 0.1           | Shree Vidya Jayaraman   | Transferred content from the Jive page: DOC-74204                                   |
+--------------+------------------------+---------------+-------------------------+-------------------------------------------------------------------------------------+
|              |                        |               |                         |                                                                                     |
+--------------+------------------------+---------------+-------------------------+-------------------------------------------------------------------------------------+
|              |                        |               |                         |                                                                                     |
+--------------+------------------------+---------------+-------------------------+-------------------------------------------------------------------------------------+
