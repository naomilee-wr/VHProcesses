:orphan:

======================================================
**Code Review Procedure Using Code Collaborator Tool**
======================================================

This procedure describes the code review process used by Development Engineers.

- Code review is method for inspection of newly written code for the purpose of discovering and fixing bugs before files are checked in.
- Numerous studies have shown that use of code reviews early in software development leads to significantly fewer defects found during stabilization phase and more importantly, significantly fewer defects found by customers. 
- The earlier in development process that a defect is found, the quicker it is to fix.
- By using an efficient tool to conduct code reviews, the cumulative time spent conducting code reviews and thus fixing defects early is far quicker than time required to find and fix these defects later.
 
|

Scope:

- The code review process described in this document is targeted to all Engineering teams at Wind River.
- The process is required for changes to any software to be released into a product.
- The process is required for changes to all test codes (including UT,  VxTEST, KONG, etc) used to test our products.
- The process can be used for other software but is not required. This might include shell scripts widely used internally or software tools developed for use by small groups of engineers.

|

Roles 
------ 

- Reviewer

  A reviewer is a person responsible for finding and reporting bugs in newly implemented sections of code. The reviewer is a second pair of eyes who must actively approve a set of code changes or must file bugs within the Code Collaborator tool wherever a bug is identified. The review cannot be completed without express approval from all reviewers. None of the code may be checked in without a completed review.

  There must be at least one reviewer participating in a review. This person ideally would be someone who is familiar with the code or familiar with related code that fits into the same system. Usuallythe domain lead is responsible to review all code within his or her domain.  

  It would be wise to include more than one reviewer on the more complex reviews. The author should use his or her best discretion as to how many reviewers to include but in most cases more than a few reviewers would not be recommended. 
   
  Preferred reviewer: Domain owners, peer Developer who has the experience, InfoDev team for any customer facing content
   
- Observer

  An observer (e.g., Product Architect, Scrum Tester) is an optional participant in a review. No observer is required to do anything for a review. There are often many observers for any given code review.
   
|

Responsibilities
----------------- 

- Reviewer

  - The reviewer must review all changes, to make sure the changes are relevant to either:

    - For user story code reviews, the reviewer must read the user story description in Jira to understand what is being developed.
    - For defect fix code reviews, the reviewer must read the defect description in JIRA to understand what problem is being fixed.

  - The reviewer is additionally responsible to consider code that was not changed but should have been changed.
  - Whenever any issue is identified, the reviewer must either comment or file bugs depending on different issue types [See File Subcriptions section below].
   
- Observer

  - The observer may completely ignore a review by silently doing nothing.
  - The observer may silently scan through the changes without commenting or filing bugs.
  - The observer can participate in the review by adding comments or filing bugs, or even promote himself or herself to reviewer, but must assume the same responsibility as reviewer.

- Author

  - The author should take timely action on any comments or bugs.
  - A review cannot be completed without approval from all reviewers.
  - Code shall not be merged to release branch until the review is complete.  

Note: all comments must be read by all reviewers before a review can be completed, even if the comment was added by an observer.

|

|image0|


**File Subsciptions**
---------------------

The Code Collaborator tool provides the ability for users to create file subscriptions that allow them to be automatically included in reviews where particular files of interest that match a predefined path pattern under "Settings" -> "File Subscriptions".

The usage of “File Subscriptions” can help domain owners to get involved to code reviews of any changes to a specific domain, but it could also lead to potential delayed completion of code reviews if not used wisely. Here are some guidelines:

- Recommend to folks that “File Subscriptions” should be setup with the “My Role” setting set to “Observer” (this applies to so-called domain owners and PA-Owner’s).
- When a Code Collaborator review is started that affects one of the subscribed source files, the subscriber will get an e-mail notification.  At this point, the subscriber can decide whether they feel it’s necessary to actively participate in the review (based on the scope of the changes, time commitment, etc.), and then manually change their role from “Observer” to “Reviewer”. 
- To support primary and secondary reviewers, i.e. to handle the vacation scenario, more than one engineer can subscribe to a given set of files.
- An author of a Code Collaborator review should use the capability to switch the role of individual from “Reviewer” to “Observer” only in extreme situations, e.g. both the primary and secondary reviewers are sick, and the author has reached out to the respective managers and architects and it’s agreed that it’s okay to switch the individual from “Reviewer” to “Observer”.

**Comment Vs. Bug**
--------------------

The Code Collaborator tool provides the ability for reviewers to insert comment messages and to generate bugs. It is important to understand the distinction between adding a comment and creating a bug.

The definition of a bug is very simple: if there is something wrong with the code, no matter how trivial, this is a bug and needs to be recorded. Trivial typos in source code that do not affect operation are bugs as much as significant algorithm coding problems. Users who are new to the code review process, or are just too polite, will often incorrectly add comments next to trivial bugs and use the "Add Bug" button only for the more serious of bugs. This practice is problematic since the bug tracking mechanism is not put in place thus resulting in significant risk that the bug will not be fixed.

Here are some examples of errors all of which should be entered as bugs:

+------------------------------------------------------+----------------+-------------------------+ 
|             **Bug**                                  |  **Severity**  |         **Type**        |    
+------------------------------------------------------+----------------+-------------------------+ 
|Incorrect WRS copyright date                          |  Minor         | Coding Standard         |    
+------------------------------------------------------+----------------+-------------------------+ 
|Incorrect modification history sequence due to merge  |  Minor         | Coding Standard         |    
+------------------------------------------------------+----------------+-------------------------+ 
| Misspelled word/typos                                |  Minor         | Documentation           |       
+------------------------------------------------------+----------------+-------------------------+ 
|Leading white space not aligned with previous line    |  Minor         | Coding Standard         |     
+------------------------------------------------------+----------------+-------------------------+ 
|Unclear algorithm should be commented more clearly    |  Minor         | Documentation           |       
+------------------------------------------------------+----------------+-------------------------+ 
|Array out of bounds error                             |  Major         | Algorithm               |     
+------------------------------------------------------+----------------+-------------------------+ 
|Function arguments in incorrect order                 |  Major         | Algorithm               |     
+------------------------------------------------------+----------------+-------------------------+ 
|Footprint significantly increases                     |  Major         | Algorithm               |     
+------------------------------------------------------+----------------+-------------------------+ 

A reviewer is more than welcome to enter comments to ask questions about the code or to ask for background information in order to help understand the code. Note: quite often if a reviewer is asking for clarification, this may be an indication that the code should be commented better, so a bug may be submitted with a description something like: "Add a comment for XXX". Often the coder will so deeply understand the implementation and not realize the importance of well positioned comments.

**Customer Facing Content** Check with Martin and Kitty            
-------------------------------------------------------------   

All customer facing content must be reviewed by a member of the InfoDev team. Customer facing content includes the following:

- Module and function header comments provided in source code that result in API reference entries
- SYNOPSIS and HELP text provided in VxWorks Layer Meta-Data Files (.vsbl)
- 'Component’, ‘Parameter’, ‘Selection’, and ‘Folder’ names along with the NAME and  SYNOPSIS text provided in Component Definition Files (.cdf)
- BSP provided target.ref files
- VSB configuration option names and the associated ‘prompt’ and ‘help’ text provided in .vxconfig files
- Output visible to customers via printErr(), printExc(), logMsg(), printf(), etc.  In general, this does not include output surrounded by an #ifdef DEBUG statement, for example.

**Criteria for a complete review**
---------------------------------------

The review is done when:

- All the code submitted in code review tool has been reviewed.
- Reworked code has been re-loaded into Code Collaborator.
- Reviewers have read all comments.
- Reviewers who filed bugs have marked them “fixed”.
- Reviewers have clicked the “Send to Completed” button.

After that, for better traceability, link the code review link to requirement and defect tracking systems, by:

- For user story, copy & paste the link to the Jira user story "Comments" field (the format of the link should look something like this:  http://codereview.wrs.com/ui#review:id=XXXX where "XXXX" is the Code Collaborator ID number for the review that was conducted)
- For defect, enter the JIRA number into Code Collaborator "Remote System Links" section.  

|image1| 

|

References 
-----------------
- `VxWorks 7 Code Review Guideline <https://jive.windriver.com/docs/DOC-72794>`_
- `VxWorks 7 Code Review Checklist <https://jive.windriver.com/docs/DOC-73882>`_
- `VxWorks 7 Code Review Improvements (Best Practices) <https://jive.windriver.com/docs/DOC-73724>`_
- CC Quickstart: http://twiki.wrs.com/Main/CCollabQuickstart --- Check with Martin and Kitty if this is available in Jive
- Code Collaborator: http://codereview.wrs.com/ by SmartBear Software as the code review tool
   
|

**Change Log**
--------------
+----------------+----------------+----------------+----------------+---------------------------------------+
| **Date**       | **Change       | **Version**    | **Change By**  | **Description**                       |
|                | Request ID**   |                |                |                                       |
+----------------+----------------+----------------+----------------+---------------------------------------+
| 04/30/2020     | N/A            | 0.1            | Shree Vidya    | Transferred content from Code review  |
|                |                |                | Jayaraman      | process (v0.7)                        |
+----------------+----------------+----------------+----------------+---------------------------------------+
|                |                |                |                |                                       |
+----------------+----------------+----------------+----------------+---------------------------------------+

.. |image0| image:: /_static/CoreDev/CodingIntBuild/CodeReviewFlow.jpg
.. |image1| image:: /_static/CoreDev/CodingIntBuild/CodeReviewProcedure_CCRToolExample.jpg